Term,Definition,Python example,R example
Operator,"In programming, operators are special functions that are **denoted by specific symbols or keywords** and can be used to manipulate and compare information in the program. Sometimes the way an operator works depends on the **data type** being used with it.","`+` for addition of numbers, `+` for concatenation of strings, `in` for inclusion in a list","`+` for addition of numbers, `==` for equality"
Assignment operator,"In many programming language, a *variable* can be **assigned** a value with the equals sign (`=`); *e.g.* `var_name = 1` assigns a variable named `var_name` the value of the integer `1`.","`=` assigns a value to a variable","`<-` assigns a value to a variable; `=` can also be used"
Arithmetic operators,"Many programming language have basic arithmetic operators to manipulate numeric data types, like `+` for **addition**, `-` for **subtraction**, `*` for **multiplication**, and `/` for **division**. Note that in some programming languages, these symbols can be used as operators for other data types with different outcomes, for example in Python, the `+` operator can also concatenate (combine) two strings together.","`+`, `-`, `*`, `/`","`+`, `-`, `*`, `/`"
Update operator,"Some programming languages have **update operators** that combine **arithmetic** operations with **assignment**. For example, in Python, `+=` adds a value to a variable and assigns the result to the same variable name. This is equivalent to `x = x + 1`.","`+=`, `-=`, `*=`, `/=`","*NA*"
Logical operators,"Logical operators allow comparisons of CONDITIONS. Common logical operators are **and** (represented as `&&` or `&` or `and`) and **or** (represented as **||**,  **|**, or `or`). These return a boolean TRUE or FALSE value.","`and`, `or`, `not`","`&`, `|`, `!`"
Comparative operators,"Logical comparisons of numbers include **equality** (`==`), **greater than** (`>`), **greater than or equal to** (`>=`), **less than** (`<`), **less than or equal to** (`<=`). These return a boolean TRUE or FALSE value.","`==`, `>`, `>=`, `<`, `<=`","`==`, `>`, `>=`, `<`, `<=`"
Inclusion operators,"Some languages use another operator to check whether a certain value is included within a larger data structure, sometimes denoted as `in`. These operators return a boolean TRUE or FALSE value.","`in`","`%in%`"
Negation operator,"For any comparison or logical operation, a **negation** can be made, represented in many programming languages as `!` or `not`, e.g. `!TRUE` is equivalent to `FALSE`.","`!`, `not`","`!`"