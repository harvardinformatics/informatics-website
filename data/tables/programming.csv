Term,Definition,Python example,R example
Text editor,"A graphical program on a computer that displays plain text files on the screen and allows them to be edited. Many text editors designed for coding (*e.g.* <a href=""https://code.visualstudio.com/"" target=""_blank"">VSCode</a>) have features like syntax highlighting, code folding, and automatic indentation.","VSCode","VSCode"
Integrated Development Environment (IDE),"A graphical program on a computer that contains tools to aid development in a specific programming language. These usually have an integrated **text editor**","Spyder","Rstudio"
Notebook,"Text formats that allow for the interleaving of code blocks and formatted text in a single document. Notebooks can be run interactively, with code blocks executed in real time.","Jupyter","Rmarkdown"
Programming language,"A programming language is a formal language comprising a set of instructions that produce various kinds of output. These languages are used to create software, scripts, and other sets of instructions for computers. Programming languages can be broadly categorized as compiled or interpreted based on how their instructions are executed.","Python is an intepreted language","R is an interpreted language"
Compiled language,"A programming language that is translated into machine code before the program is run. This machine code is specific to the type of computer the program will run on. Examples: C, C++, Java ","",""
Interpreted language,"A programming language that is executed line by line by another program called an interpreter. The interpreter reads the code and executes it directly. Examples: Perl, JavaScript, R","Python is an interpreted language","R is an interpreted language"
Syntax,"The way a particular programming language expects its code to be written.","*NA*","*NA*"
Markdown,"A syntax for formatting plain text and interleaving code blocks that can be run when the document is generated.","*NA*","*NA*"
Keyword,"A reserved word in a programming language that has a specific meaning and purpose. Keywords cannot be used as variable names.","`if`, `else`, `for`","`if`, `else`, `for`"
Conditional,"**Keywords** that allows for different actions to be taken based on whether a specific condition is met. Typically in the form of if-else statements using the `if`, `else if` (or type some similar way), and `else`.","`if`, `elif`, `else`","`if`, `else if`, `else`"
Loop,"**Keywords** that repeats a sequence of instructions until a specific condition is met. Typically `while` and `for` loops are used. A `while` loop will continue to execute as long as a condition is met, and a `for` loop will execute a specific number of times.","`for`, `while`","`for`, `while`"
Variable,"The name of a piece of information stored into memory in a computer program. This name can be referred to later in the program and be used to access the information.","In `x = 5`, `x` is the variable","In `x <- 5`, `x` is the variable"
Class,"A defined way to construct **objects** that have particular data (**attributes**) or **methods** (**functions**) associated with them.","Most objects in Python are classes: string, list, dictionary","Most objects in R are classes: data.frame, matrix"
Object,"An instance of a **class**. Colloquially, this term may be used to mean any piece of data (variable) in your program, whether it represents a class or not.","In Python, `my_list = [1, 2, 3]` creates an object of the class `list`","In R, `my_vec <- c(1, 2, 3)` creates an object of the class `numeric`"
Immutable,"An **object** whose state cannot be modified after it is created.","string, tuple","Most objects in R are mutable"
Iterable,"An **object** that consists of a sequence of other objects and that can be looped over usually with a `for` loop.","string, list, dictionary","vector, list"
Element,"A single piece of data within a **data structure**. Most commonly used in the context of **iterable** data structures.","In `my_list = [1, 2, 3]`, `1` is an element of the list","In `my_vec <- c(1, 2, 3)`, `1` is an element of the vector"
Index,"A number that represents the position of an **element** within an **iterable** data structure. In many programming languages, the first index of an iterable is `0`.","In `my_list = [1, 2, 3]`, `0` is the index of `1`","In `my_vec <- c(1, 2, 3)`, `1` is the element at index `1`"
Slicing,"The process of selecting a subset of **elements** from an **iterable** data structure using their **indices**.","In `my_list = [1, 2, 3]`, `my_list[0:2]` returns `[1, 2]`","In `my_vec <- c(1, 4, 5)`, `my_vec[2:3]` returns `[4, 5]`"
Splicing,"The process of removing or inserting elements from or into an **iterable** data structure, often altering its size and content.","In `my_list = [1, 2, 3]`, `my_list[1:2] = [4, 5]` changes `my_list` to `[1, 4, 5, 3]`","No built-in splicing method, objects must be manipulated via indexing."
Indexing,"The process of selecting a specific **element** from an **iterable** data structure using its **index**.","In `my_list = [1, 2, 3]`, `my_list[0]` returns `1`","In `my_vec <- c(1, 2, 3)`, `my_vec[1]` returns `1`"
Data type,"The way data is encoded on the computer. Different operations can be performed on different data types.","integer, string","numeric, character"
Boolean,"A universal data type that can only have one of two values, usually `TRUE` or `FALSE`. Booleans are often used in programming to make and evaluate complex logical statements.","`True` or `False`","`TRUE` or `FALSE`"
Data structure,"The way data is organized within a programming language. Different operations can be performed on different data structures. Many data structures are **iterable**","list, dictionary","vector, data.frame"
Function,"A generalized chunk of code that can be easily be called (run) by other code.","`print()`, `len()`","`mean()`, `sd()`"
Method,"A **function** that is associated with a **class** and can only be used on **objects** of that class.","`.append()` for **lists**","`summary()`, `plot()`"
Argument,"A value passed to a function or program when it is called.","`len(x)`, where `x` is an **iterable** object (*e.g.* string, list)","`mean(x)`, where `x` is a vector of numbers"
Library,"A collection of **functions** that can be imported and used in other programs.","`math`, `os`","`dplyr`, `ggplot2`"
Parameter,"A variable that is used in a function to represent an argument that is passed to it.","In `def my_func(x):`, `x` is a parameter","In `my_func <- function(x)`, `x` is a parameter"
Return value,"The value that a function or program gives back after it is called.","`len(x)` returns the length of the iterable object `x`","`mean(x)` returns the average of the vector `x`"
Operator,"In programming, operators are special functions that are **denoted by specific symbols or keywords** and can be used to manipulate and compare information in the program. Sometimes the way an operator works depends on the **data type** being used with it. Some examples of operators are `+` to add two numbers in many languages, `in` to check inclusion in Python.","`+` for addition of numbers, `+` for concatenation of strings, `in` for inclusion in a list","`+` for addition of numbers, `==` for equality"
Assignment operator,"In many programming language, a *variable* can be **assigned** a value with the equals sign (`=`); *e.g.* `var_name = 1` assigns a variable named `var_name` the value of the integer `1`.","`=` assigns a value to a variable","`<-` assigns a value to a variable; `=` can also be used"
Arithmetic operators,"Many programming language have basic arithmetic operators to manipulate numeric data types, like `+` for **addition**, `-` for **subtraction**, `*` for **multiplication**, and `/` for **division**. Note that in some programming languages, these symbols can be used as operators for other data types with different outcomes, for example in Python, the `+` operator can also concatenate (combine) two strings together.","`+`, `-`, `*`, `/`","`+`, `-`, `*`, `/`"
Logical operators,"Logical operators allow comparisons of CONDITIONS. Common logical operators are **and** (represented as `&&` or `&` or `and`) and **or** (represented as **||** or **|** or `or`).","`and`, `or`, `not`","`&`, `|`, `!`"
Comparative operators,"Logical comparisons of numbers include **equality** (`==`), **greater than** (`>`), **greater than or equal to** (`>=`), **less than** (`<`), **less than or equal to** (`<=`). These return a boolean TRUE or FALSE value.","`==`, `>`, `>=`, `<`, `<=`","`==`, `>`, `>=`, `<`, `<=`"
Inclusion operators,"Some languages use another operator to check whether a certain value is included within a larger data structure, sometimes denoted as `in`. These operators return a boolean TRUE or FALSE value.","`in`","`%in%`"
Negation operator,"For any comparison or logical operation, a **negation** can be made, represented in many programming languages as `!` or `not`, e.g. `!TRUE` is equivalent to `FALSE`.","`!`, `not`","`!`"
