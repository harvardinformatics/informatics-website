Term,Definition
`PATH`,"An **environment variable** that lists directories where the shell looks for programs to run. A common error when running a program is **Command not found**, which occurs when the program is not in one of the directories listed in the `PATH` variable."
"Install","The process of setting up software on a computer system, typically involving downloading, configuring, **building** executables, and copying files to the appropriate directories."
"Build","The process of **compiling** and linking source code files to create an executable program or library, often automated using build tools like `make`."
"Source Code","The original human-readable code of a piece of software written in a programming language like C, C++, or Python, which must be compiled or interpreted to create executable software."
"Makefile","A file containing a set of instructions used by the `make` build automation tool to build programs."
"`make`","A **build** automation tool that interprets the **Makefile** to compile programs from source code, handling dependencies and execution order."
"Binary distribution","A precompiled package containing executable files, libraries, and resources, ready for installation on a specific platform (like Windows, macOS, or Linux) without requiring compilation."
"Package","A bundled collection of software, libraries, or code that is packaged to ensure consistent distribution, installation, and functionality through **package managers**."
"Package repository","A central location where software **packages** are stored and managed. Repositories can be remote, accessed online, or local, residing on a user's system."
"Package manager","A tool that automates the process of installing, updating, configuring, and removing software packages, while managing dependencies for applications or systems."
"Dependency","A **package** or **library** needed for another package to function properly. Dependencies are managed automatically by **package managers** to maintain software compatibility."
"<a href='https://cran.r-project.org/web/packages/available_packages_by_name.html' target='_blank'>CRAN (Comprehensive R Archive Network)</a>","The primary repository for R packages. Packages are installed within R using the `install.packages()` function."
"<a href='https://pypi.org/' target='_blank'>PyPI (Python Package Index)</a>","The official third-party software repository for Python packages. Packages are installed using the `pip` **package manager**."
"<a href='https://pypi.org/project/pip/' target='_blank'>pip</a>","The **package manager** for Python, used to install packages from **PyPI**."
"<a href='https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html' target='_blank'>Conda</a>","An open-source **package manager** and **environment** management system, primarily used for managing Python and R packages within isolated environments."
"<a href='https://mamba.readthedocs.io/en/latest/index.html' target='_blank'>Mamba</a>","A fast, alternative **package manager** to Conda, designed to speed up package installation and dependency resolution."
"<a href='https://brew.sh/' target='_blank'>Homebrew</a>","A macOS **package manager** that simplifies the installation of software. It is used from the command line."
"<a href='https://wiki.debian.org/AptCLI' target='_blank'>apt (Advanced Package Tool)</a>","A **package manager** used primarily by Debian-based Linux distributions, facilitating the retrieval, installation, and removal of software packages."
"Install script","A small program or set of commands that automate the process of installing software, often used for custom installations not handled by package managers."
"Environment","A general term for any isolated file space where programs are installed and run, providing specific configurations and dependencies required for consistent execution."
"Virtual environment (general)","An isolated computing **environment** that emulates a complete, independent system, allowing for the execution of applications with their specific dependencies without affecting the host system."
"Virtual environment (Python)","An isolated **environment** specific to Python projects, enabling developers to install and manage dependencies separately from the system's Python installation using tools like `venv` and `virtualenv`."
"Conda environment","An isolated workspace managed by Conda that supports multiple programming languages, allowing users to manage package dependencies and software versions, ensuring consistent, conflict-free installations."
"Container","A **package** that includes everything needed to run software consistently across different environments, including code, libraries, dependencies, and settings."
""<a href='https://docs.sylabs.io/guides/latest/user-guide/' target='_blank'>Singularity</a> container","A type of container built with Singularity, used for running applications in a secure and portable way, tailored to scientific and high-performance computing environments."
""<a href='https://www.docker.com/' target='_blank'>Docker</a> container","A type of container created with Docker that packages applications with their dependencies, ensuring consistent execution across various computing environments."



